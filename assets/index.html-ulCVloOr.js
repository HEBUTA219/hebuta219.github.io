import{_ as a,c as s,b as p,o as n}from"./app-BrZHaSrv.js";const e={};function o(i,t){return n(),s("div",null,t[0]||(t[0]=[p('<h3 id="引言" tabindex="-1"><a class="header-anchor" href="#引言"><span>引言</span></a></h3><p>JavaScript语言的一大特点就是单线程,也就是说,同一个时间只能做一件事。这是因为Javascript作为浏览器脚本语言，其主要用途是与用户互动，以及操作DOM，所以这一特性决定了它只能是单线程的，否则会带来很复杂的同步问题。比如，假定一段JS代码同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器如果同时执行应该以哪个线程为准，这显然会造成冲突和矛盾。</p><p>Javascript的单线程工作模式存在一些弊端，比如当遇到一个非常耗时的任务时会出现假死，执行效率降低。为了解决这一问题，Javascript语言将任务的执行模式分成两种：同步和异步</p><hr><h3 id="同步" tabindex="-1"><a class="header-anchor" href="#同步"><span>同步</span></a></h3><p><strong>1、定义</strong></p><p>同步是指代码按照顺序依次执行，当前面的代码执行完成之后，才会执行后面的代码。它是一种阻塞式的执行方式。</p><p><strong>2、特点</strong></p><p>（1）顺序执行：代码按照书写顺序依次执行，后面的代码必须等待前面的代码执行完成。</p><p>（2）阻塞执行：如果前面的代码耗时较长，会导致整个程序的执行被阻塞，用户界面可能会出现卡顿。</p><p><strong>3、适用场景</strong></p><p>在React中，同步操作通常发生在组件的渲染、状态更新（某些情况下）等场景中。</p><p><strong>4、示例</strong></p><p><code>console.log(&#39;1&#39;); console.log(&#39;2&#39;); console.log(&#39;3&#39;);</code></p><p>打印结果为1 2 3</p><h3 id="异步" tabindex="-1"><a class="header-anchor" href="#异步"><span>异步</span></a></h3><p><strong>1、定义</strong></p><p>异步是指代码的执行顺序并不是严格按照书写顺序进行的，某些操作可以在不阻塞主线程的情况下执行。它是一种非阻塞式的执行方式。</p><p><strong>2、特点</strong></p><p>（1）非阻塞执行：异步操作不会阻塞主线程，主线程可以继续执行后续的代码，从而提高程序的响应性。</p><p>（2）回调机制：通常通过回调函数、Promise、async/await等方式来处理异步操作的结果。</p><p><strong>3、适用场景</strong></p><p>在React中，异步操作通常用于处理网络请求、定时器、事件监听等场景。</p><p><strong>4、示例</strong></p><p><code>console.log(&#39;1&#39;); setTimeout(function(){ console.log(&#39;2&#39;); },2000); console.log(&#39;3&#39;);</code></p><p>打印结果为1 3 2(2秒后)</p><p>这是一个异步操作，通过setTimeout模拟了一个耗时2秒的网络请求。主线程不会等待fetchData函数的结果，而是会继续执行后续的代码，因此3会先打印出来。当2秒后setTimeout的回调函数被触发时，才会打印2。</p><p><img src="https://raw.githubusercontent.com/Roma-code165/lisiying/main/20250517115214465.png" alt="20250517115214465"></p><h3 id="一些问题" tabindex="-1"><a class="header-anchor" href="#一些问题"><span>一些问题</span></a></h3><p><strong>1、回调地狱（Callback Hell）</strong></p><p>如果需要执行多个异步操作，程序会一层一层嵌套下去，降低可读性，这种情况被称为回调地狱。</p><p><img src="https://raw.githubusercontent.com/Roma-code165/lisiying/main/20250517151725688.png" alt="20250517151725688"></p><p><strong>2、链式调用（Chaining）</strong></p><p>Promise用一种链式结构将多个异步操作串联起来。</p><p><img src="https://raw.githubusercontent.com/Roma-code165/lisiying/main/20250517152145758.png" alt="20250517152145758"></p><p>Promise 的链式调用避免了代码的层层嵌套。</p><p><strong>3、错误处理</strong></p><p>在使用异步操作时，可能会遇到一些网络问题或返回的数据格式不正确，可以附加一个catch在链式结构的末尾，用于捕获错误。</p><p><img src="https://raw.githubusercontent.com/Roma-code165/lisiying/main/20250517153733046.png" alt="20250517153733046"></p><p>类似的，Promise还提供finally方法，在Promise链结束后调用，可以做一些清理工作。</p><p><img src="https://raw.githubusercontent.com/Roma-code165/lisiying/main/20250517153859132.png" alt="20250517153859132"></p>',41)]))}const c=a(e,[["render",o]]),g=JSON.parse('{"path":"/article/zu7te8qs/","title":"JS执行机制","lang":"zh-CN","frontmatter":{"title":"JS执行机制","tags":["李思影"],"createTime":"2025/05/24 08:20:33","permalink":"/article/zu7te8qs/"},"readingTime":{"minutes":2.98,"words":893},"git":{"updatedTime":1747468823000,"contributors":[{"name":"lisiying","username":"lisiying","email":"1208351661@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/lisiying?v=4","url":"https://github.com/lisiying"}]},"filePathRelative":"前端/JS执行机制.md","headers":[],"categoryList":[{"id":"9abfe4","sort":10003,"name":"前端"}]}');export{c as comp,g as data};
